{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","frame","setFrame","startFrame","setStartFrame","endFrame","setEndFrame","instance","setInstance","getValidFrame","e","cur","target","value","isNaN","Math","max","min","className","onSubmit","preventDefault","alert","playSegments","type","onChange","onClick","lottieRef","onEvent","round","currentRawFrame","autoplay","loop","controls","src","require","style","height","width","setSpeed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k56IAsEeA,MAlEf,WAAgB,IAAD,EAEaC,mBAAS,GAFtB,mBAENC,EAFM,KAECC,EAFD,OAGuBF,mBAAS,GAHhC,mBAGNG,EAHM,KAGMC,EAHN,OAImBJ,mBAAS,GAJ5B,mBAINK,EAJM,KAIIC,EAJJ,OAKmBN,mBAAS,MAL5B,mBAKNO,EALM,KAKIC,EALJ,KAOPC,EAAgB,SAACC,GACrB,IAAIC,EAAMD,EAAEE,OAAOC,MAKnB,OAJIC,MAAMH,KACRA,EAAM,GACRA,EAAMI,KAAKC,IAAIL,EAAK,GACpBA,EAAMI,KAAKE,IAAIN,EAAK,KAgBtB,OACE,sBAAKO,UAAU,MAAf,UACE,kDAAqBjB,EAArB,OAEA,uBAAMkB,SAhBW,SAACT,GACpBA,EAAEU,iBACEjB,GAAcE,EAChBgB,MAAM,sBAIRd,EAASe,aAAa,CAACnB,EAAYE,IAAW,GAC9CD,EAAc,GACdE,EAAY,KAOV,UACE,kCACE,uBAAOiB,KAAK,OAAOV,MAAOV,EAAYqB,SAAU,SAACd,GAAD,OAAON,EAAcK,EAAcC,OACnF,uBAAOa,KAAK,OAAOV,MAAOR,EAAUmB,SAAU,SAACd,GAAD,OAAOJ,EAAYG,EAAcC,UAEjF,uBAAOa,KAAK,SAASV,MAAM,WAG7B,wBAAQY,QAAS,kBAAMlB,EAASe,aAAa,CAAC,EAAG,KAAK,IAAtD,oBAEA,cAAC,IAAD,CACEI,UAAW,SAAAnB,GACTC,EAAYD,IAEdoB,QAAS,SAAAjB,GACG,UAANA,GACFR,EAASa,KAAKa,MAAMrB,EAASsB,mBAGjCC,UAAU,EACVC,MAAM,EACNC,UAAU,EACVC,IAAKC,EAAQ,IACbC,MAAO,CAACC,OAAQ,QAASC,MAAO,WAIlC,wBAAQZ,QAAS,kBAAMlB,EAAS+B,SAAS,MAAzC,qBACA,wBAAQb,QAAS,kBAAMlB,EAAS+B,SAAS,IAAzC,qBACA,wBAAQb,QAAS,kBAAMlB,EAAS+B,SAAS,IAAzC,yBCrDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fa49f165.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { Player } from '@lottiefiles/react-lottie-player';\n\nfunction App() {\n  \n  const [frame, setFrame] = useState(0);\n  const [startFrame, setStartFrame] = useState(0);\n  const [endFrame, setEndFrame] = useState(0);\n  const [instance, setInstance] = useState(null);\n\n  const getValidFrame = (e) => {\n    let cur = e.target.value;\n    if (isNaN(cur))\n      cur = 0;\n    cur = Math.max(cur, 0);\n    cur = Math.min(cur, 42);\n    return cur;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (startFrame >= endFrame) {\n      alert('Invalid sequence!');\n      return;\n    }\n\n    instance.playSegments([startFrame, endFrame], true);\n    setStartFrame(0);\n    setEndFrame(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h3> Current Frame: {frame} </h3>\n\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" value={startFrame} onChange={(e) => setStartFrame(getValidFrame(e))} />\n          <input type=\"text\" value={endFrame} onChange={(e) => setEndFrame(getValidFrame(e))} />\n        </label>\n        <input type=\"submit\" value=\"Set\"/>\n      </form>\n\n      <button onClick={() => instance.playSegments([0, 42], true)}> Play </button>\n\n      <Player\n        lottieRef={instance => {\n          setInstance(instance);\n        }}\n        onEvent={e => {\n          if (e === 'frame') {\n            setFrame(Math.round(instance.currentRawFrame));\n          }\n        }}\n        autoplay={true}\n        loop={true}\n        controls={true}\n        src={require('./assets/Vriks_Rishi.json')}\n        style={{height: '400px', width: '400px'}}\n      >\n      </Player>\n\n      <button onClick={() => instance.setSpeed(0.25)}> 0.25x </button>\n      <button onClick={() => instance.setSpeed(1.00)}> 1.00x </button>\n      <button onClick={() => instance.setSpeed(2.00)}> 2.00x </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}